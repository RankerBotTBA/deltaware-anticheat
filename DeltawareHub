-- Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Automatically copy Discord link to clipboard
local discordLink = "https://discord.gg/2jWHSf6j"
setclipboard(discordLink)

-- Notify the player that the Discord link has been copied
Rayfield:Notify({
    Title = "Discord Link Copied!",
    Content = "The Discord link has been copied to your clipboard. Paste it in your browser.",
    Duration = 7.5, -- Notification duration in seconds
    Image = 13289068631, -- Optional: Add an image ID for the notification
    Actions = { -- Optional: Add actions to the notification
        Dismiss = {
            Name = "Dismiss",
            Callback = function()
                print("Notification dismissed.")
            end,
        },
    },
})

-- Discord Webhook for Key System
local keyWebhookURL = "https://discord.com/api/webhooks/1363878374774280222/tKoSlstGQ7A1zjcPT8Ochef8cxT0ynzN5sNiuy0sJ3MJNgCSltXoPsPJjCcwAde-IcCr"

-- Discord Webhook for Key Logging
local logWebhookURL = "https://discord.com/api/webhooks/1363889942094286949/knb1jfpHOci6_GnRR-jFRzqU2SIKiQOhVWe_zwAIowob3H7XKQ_41p7IynTK5u6737Um"

-- Function to generate a random key
local function generateKey()
    local charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    local key = ""
    for i = 1, 24 do
        local randomIndex = math.random(1, #charset)
        key = key .. charset:sub(randomIndex, randomIndex)
    end
    return key
end

-- Function to send logs to the Discord Webhook
local function sendLogToWebhook(logMessage)
    local data = {
        ["content"] = logMessage,
        ["username"] = "Key System Logs"
    }
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local request = http_request or request or HttpPost or syn.request
    request({
        Url = logWebhookURL, -- Use the log webhook URL
        Method = "POST",
        Headers = headers,
        Body = game:GetService("HttpService"):JSONEncode(data)
    })
end

-- Generate and send a key only once per session
local playerName = game.Players.LocalPlayer.Name
local playerUserId = game.Players.LocalPlayer.UserId
local generatedKey = generateKey()

-- Log the key generation
local currentTime = os.date("%Y-%m-%d %H:%M:%S") -- Get the current time and date
local logMessage = string.format("**Key Generated:**\n**Time:** %s\n**Player Name:** %s\n**UserId:** %d\n**Key:** %s", currentTime, playerName, playerUserId, generatedKey)
sendLogToWebhook(logMessage)

-- Send the key to the Discord webhook
local function sendKeyToWebhook(key, playerName, playerUserId)
    local data = {
        ["content"] = "New Key Generated:\n**Player Name:** " .. playerName .. "\n**UserId:** " .. playerUserId .. "\n**Key:** " .. key,
        ["username"] = "Key System"
    }
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local request = http_request or request or HttpPost or syn.request
    request({
        Url = keyWebhookURL,
        Method = "POST",
        Headers = headers,
        Body = game:GetService("HttpService"):JSONEncode(data)
    })
end

sendKeyToWebhook(generatedKey, playerName, playerUserId)

-- Key System Validation
local function validateKey(inputKey)
    local currentTime = os.date("%Y-%m-%d %H:%M:%S") -- Get the current time and date

    if inputKey ~= generatedKey then
        -- Log invalid key attempts
        local logMessage = string.format("Invalid Key Attempt:\nTime: %s\nPlayer Name: %s\nUserId: %d\nEntered Key: %s", currentTime, playerName, playerUserId, inputKey)
        sendLogToWebhook(logMessage)

        game.Players.LocalPlayer:Kick("Invalid key! Please check the Discord for the correct key.")
        return false
    end

    -- Log successful key validation
    local logMessage = string.format("Key Validated Successfully:\nTime: %s\nPlayer Name: %s\nUserId: %d", currentTime, playerName, playerUserId)
    sendLogToWebhook(logMessage)

    return true
end

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = "Deltaware Hub",
    LoadingTitle = "Loading, please wait...",
    LoadingSubtitle = "by Deltaware",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "DeltawareHub"
    },
    KeySystem = true, -- Enable key system
    KeySettings = {
        Title = "Deltaware Hub",
        Subtitle = "Key System",
        Note = "Key is in the Discord. Link already copied in your clipboard. Paste it in your browser.",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = generatedKey -- Use the generated key
    }
})

-- Tabs
local Tab1 = Window:CreateTab("Player", 4483362458)
local Tab2 = Window:CreateTab("Utilities", 4483362458)
local Tab3 = Window:CreateTab("ESP", 4483362458)
local Tab4 = Window:CreateTab("Misc", 4483362458)
local Tab5 = Window:CreateTab("Emotes", 4483362458)

-- Function to reapply settings after respawn
local function reapplySettings()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Reapply WalkSpeed and JumpPower
    humanoid.WalkSpeed = 16
    humanoid.JumpPower = 50
end

-- Reapply settings on respawn
game.Players.LocalPlayer.CharacterAdded:Connect(reapplySettings)

-- WalkSpeed Slider
Tab1:CreateSlider({
    Name = "Walkspeed",
    Range = {16, 500},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
})

-- JumpPower Slider
Tab1:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = 50,
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end,
})


-- SPIN SCRIPT

local spinning = false -- Track spinning state
local spinSpeed = 50 -- Default spinning speed
local spinConnection -- Store the spinning connection

-- SPIN SPEED SLIDER
Tab1:CreateSlider({
    Name = "Spin Speed",
    Range = {1, 500},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = spinSpeed,
    Callback = function(Value)
        spinSpeed = Value -- Update the spinning speed
    end,
})

-- SPIN TOGGLE

Tab1:CreateToggle({
    Name = "Spin",
    CurrentValue = false,
    Flag = "SpinToggle",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")

        if Value then
            -- Start spinning
            spinning = true
            spinConnection = game:GetService("RunService").RenderStepped:Connect(function()
                if spinning then
                    rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
                end
            end)
        else
            -- Stop spinning
            spinning = false
            if spinConnection then
                spinConnection:Disconnect()
                spinConnection = nil
            end
        end
    end,
})

-- XRAY SCRIPT

local function xray(enable)
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and not part.Parent:FindFirstAncestorWhichIsA("Humanoid") and not part.Parent.Parent:FindFirstAncestorWhichIsA("Humanoid") then
            part.LocalTransparencyModifier = enable and 0.5 or 0
        end
    end
end



-- XRAY TOGGLE

local XrayToggle = Tab2:CreateToggle({
    Name = "Xray",
    CurrentValue = false,
    Flag = "XrayToggle",
    Callback = function(Value)
        xray(Value) -- Call the xray function with the toggle value
    end
})

-- Dropdown to list all players in the server
local selectedPlayer = nil -- Variable to store the selected player

Tab2:CreateDropdown({
    Name = "Select Player",
    Options = {}, -- This will be populated dynamically
    CurrentOption = nil,
    Callback = function(Value)
        selectedPlayer = Value -- Update the selected player
    end,
})

-- Function to update the dropdown with the list of players
local function updatePlayerList()
    local playerNames = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end

-- Populate the dropdown with the current list of players
Tab2:UpdateDropdown("Select Player (SOON)", {
    Options = updatePlayerList(),
    CurrentOption = updatePlayerList,
})

-- Button to execute the fling action
Tab2:CreateButton({
    Name = "EXECUTE",
    Callback = function()
        if not selectedPlayer then
            Rayfield:Notify({
                Title = "Error",
                Content = "Please select a player first!",
                Duration = 5,
            })
            return
        end

        local targetPlayer = game.Players:FindFirstChild(selectedPlayer)
        if targetPlayer and targetPlayer.Character then
            local rootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                -- Fling logic
                local flingConnection = game:GetService("RunService").RenderStepped:Connect(function()
                    rootPart.CFrame = rootPart.CFrame + Vector3.new(0, 0, 10) -- Adjust the vector for fling direction
                end)

                -- Disconnect fling after a short duration (e.g., 5 seconds)
                wait(5)
                flingConnection:Disconnect()
            else
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Target player does not have a HumanoidRootPart!",
                    Duration = 5,
                })
            end
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Target player not found!",
                Duration = 5,
            })
        end
    end,
})




-- ESP SETTINGS
local espSettings = {
    Chams = false,
    Boxes = false,
    Studs = false,
    Name = false,
    Color = Color3.new(255, 255, 255),
}

-- CHAMS TOGGLE
Tab3:CreateToggle({
    Name = "Chams",
    CurrentValue = false,
    Flag = "ChamsToggle",
    Callback = function(Value)
        espSettings.Chams = Value
        -- Logic for enabling/disabling Chams
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        if Value then
                            part.Material = Enum.Material.ForceField -- Enable Chams
                            part.Color = espSettings.Color -- Apply selected color
                        else
                            part.Material = Enum.Material.Plastic -- Reset to default
                        end
                    end
                end
            end
        end
    end,
})

-- BOXES TOGGLE
Tab3:CreateToggle({
    Name = "Boxes",
    CurrentValue = false,
    Flag = "BoxesToggle",
    Callback = function(Value)
        espSettings.Boxes = Value
        -- Logic for enabling/disabling Boxes
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                local box = player.Character:FindFirstChild("ESPBox")
                if Value then
                    if not box then
                        box = Instance.new("BillboardGui", player.Character)
                        box.Name = "ESPBox"
                        box.Size = UDim2.new(4, 0, 6, 0)
                        box.StudsOffset = Vector3.new(0, 3, 0)
                        box.AlwaysOnTop = true

                        local frame = Instance.new("Frame", box)
                        frame.Size = UDim2.new(1, 0, 1, 0)
                        frame.BackgroundTransparency = 1
                        frame.BorderSizePixel = 2
                        frame.BorderColor3 = espSettings.Color
                    end
                else
                    if box then
                        box:Destroy()
                    end
                end
            end
        end
    end,
})

-- STUDS TOGGLE
Tab3:CreateToggle({
    Name = "Studs",
    CurrentValue = false,
    Flag = "StudsToggle",
    Callback = function(Value)
        espSettings.Studs = Value
        -- Logic for enabling/disabling Studs
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                local distanceLabel = player.Character:FindFirstChild("StudsLabel")
                if Value then
                    if not distanceLabel then
                        distanceLabel = Instance.new("BillboardGui", player.Character)
                        distanceLabel.Name = "StudsLabel"
                        distanceLabel.Size = UDim2.new(0, 100, 0, 25)
                        distanceLabel.StudsOffset = Vector3.new(0, 3, 0)
                        distanceLabel.AlwaysOnTop = true

                        local textLabel = Instance.new("TextLabel", distanceLabel)
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.TextColor3 = espSettings.Color
                        textLabel.TextScaled = true
                        textLabel.Text = "0 Studs"
                    end

                    -- Update distance dynamically
                    game:GetService("RunService").RenderStepped:Connect(function()
                        if distanceLabel and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                            distanceLabel.TextLabel.Text = math.floor(distance) .. " Studs"
                        end
                    end)
                else
                    if distanceLabel then
                        distanceLabel:Destroy()
                    end
                end
            end
        end
    end,
})

-- NAME TOGGLE
Tab3:CreateToggle({
    Name = "Name",
    CurrentValue = false,
    Flag = "NameToggle",
    Callback = function(Value)
        espSettings.Name = Value
        -- Logic for enabling/disabling Name ESP
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                local billboard = player.Character:FindFirstChild("NameBillboard")
                if Value then
                    if not billboard then
                        billboard = Instance.new("BillboardGui", player.Character)
                        billboard.Name = "NameBillboard"
                        billboard.Size = UDim2.new(0, 180, 0, 45)
                        billboard.StudsOffset = Vector3.new(0, 9, 0)
                        billboard.AlwaysOnTop = true

                        local textLabel = Instance.new("TextLabel", billboard)
                        textLabel.Size = UDim2.new(1, 0, 1, 0)
                        textLabel.BackgroundTransparency = 1
                        textLabel.Text = player.Name
                        textLabel.TextColor3 = espSettings.Color
                        textLabel.TextScaled = true
                    end
                else
                    if billboard then
                        billboard:Destroy()
                    end
                end
            end
        end
    end,
})

-- COLOR PICKER
Tab3:CreateColorPicker({
    Name = "ESP Color",
    Color = espSettings.Color,
    Flag = "ESPColorPicker",
    Callback = function(Color)
        espSettings.Color = Color
        -- Update ESP color for all features
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                -- Update Chams color
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") and espSettings.Chams then
                        part.Color = Color
                    end
                end

                -- Update Name color
                local billboard = player.Character:FindFirstChild("NameBillboard")
                if billboard then
                    local textLabel = billboard:FindFirstChildOfClass("TextLabel")
                    if textLabel then
                        textLabel.TextColor3 = Color
                    end
                end

                -- Update Box color
                local box = player.Character:FindFirstChild("ESPBox")
                if box then
                    local frame = box:FindFirstChildOfClass("Frame")
                    if frame then
                        frame.BorderColor3 = Color
                    end
                end

                -- Update Studs color
                local studsLabel = player.Character:FindFirstChild("StudsLabel")
                if studsLabel then
                    local textLabel = studsLabel:FindFirstChildOfClass("TextLabel")
                    if textLabel then
                        textLabel.TextColor3 = Color
                    end
                end
            end
        end
    end,
})

-- Notify the player that emotes are only for R15
Tab5:CreateLabel("Note: Emotes work only for R15 avatars.")

-- List of emotes from the Roblox marketplace
local emotes = {
    { Name = "Wave", AnimationId = "rbxassetid://507770239" },
    { Name = "Point", AnimationId = "rbxassetid://507770453" },
    { Name = "Cheer", AnimationId = "rbxassetid://507770818" },
    { Name = "Laugh", AnimationId = "rbxassetid://507771019" },
    { Name = "Dance 1", AnimationId = "rbxassetid://507771955" },
    { Name = "Dance 2", AnimationId = "rbxassetid://507776043" },
    { Name = "Dance 3", AnimationId = "rbxassetid://507777268" },
    { Name = "Salute", AnimationId = "rbxassetid://507770818" },
    { Name = "Tilt", AnimationId = "rbxassetid://5918726674" },
    { Name = "Shrug", AnimationId = "rbxassetid://5918726674" }
}

-- Function to play an emote
local function playEmote(animationId)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if humanoid and humanoid.RigType == Enum.HumanoidRigType.R15 then
        local animation = Instance.new("Animation")
        animation.AnimationId = animationId
        local track = humanoid:LoadAnimation(animation)
        track:Play()
    else
        Rayfield:Notify({
            Title = "Emote Error",
            Content = "Emotes only work for R15 avatars.",
            Duration = 5
        })
    end
end

-- Create buttons for each emote
for _, emote in ipairs(emotes) do
    Tab5:CreateButton({
        Name = emote.Name,
        Callback = function()
            playEmote(emote.AnimationId)
        end
    })
end



-- INFINITE YIELD LOADER
Tab4:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
})

-- AK ADMIN LOADER
Tab4:CreateButton({
    Name = "AK Admin (Key in Discord)",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-AK-ADMIN-34306"))()
    end,
})

-- NAMELESS ADMIN LOADER
Tab4:CreateButton({
    Name = "Nameless Admin (Might make you lag)",
    Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/Nameless-Admin/main/Source.lua"))()
    end,
})

-- KRON HUB LOADER
Tab4:CreateButton({
    Name = "Kron Hub (Lumber Tycoon 2)",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/DevKron/Kron_Hub/refs/heads/main/version_1.0'))("")
    end,
})

-- BUTTER V5 LOADER
Tab4:CreateButton({
    Name = "Butter V5 (Lumber Tycoon 2, potentially broken - Key in Discord soon)",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ButterHub/ButterV5/main/Loader.lua"))()
    end,
})

-- DISCORD SCRIPT

Tab4:CreateButton({
    Name = "Copy Discord Link",
    Callback = function()
        -- The Discord link to copy
        local discordLink = "https://discord.gg/2jWHSf6j"

        -- Copy the link to the clipboard
        setclipboard(discordLink)

        -- Show a notification to the player
        Rayfield:Notify({
            Title = "Discord Link Copied!",
            Content = "The Discord link has been copied to your clipboard. Paste it in your browser.",
            Duration = 7.5, -- Notification duration in seconds
            Image = 13289068631, -- Optional: Add an image ID for the notification
            Actions = { -- Optional: Add actions to the notification
                Dismiss = {
                    Name = "Dismiss",
                    Callback = function()
                        print("Notification dismissed.")
                    end,
                },
            },
        })
    end,
})
